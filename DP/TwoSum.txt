//Time Complexity O(nlogn) Space Complexity O(n);
approach 1:
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<pair<int,int>> v;
        for(int i=0; i<nums.size(); i++) v.push_back({nums[i], i});
        sort(v.begin(), v.end());
        int s = 0;
        int e = nums.size()-1;

        while(s<e){
            int sum = v[s].first + v[e].first;
            if(sum == target) return {v[s].second, v[e].second};
            else if(sum > target) e--;
            else s++; 
        }
        return{-1, -1};
    }
};


Time Complexity O(n) Space Complexity O(n);
approach 2:
using hashmap;

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> ans;
        unordered_map<int,int> mp;
        for(int i=0; i<nums.size(); i++){
            if(mp.find(abs(target-nums[i])) != mp.end()){
                ans.push_back(mp[abs(target-nums[i])]);
                ans.push_back(i);
                return ans;
            }
            mp[nums[i]] = i;
        }
        return ans;
    }
};