appraoch 1: using Dp and recursion;
TC = O(N) and  SC = O(N)stack space + O(N)dp array

int solve(vector<int>& nums, int index, vector<int>& dp){
    if(index == 0){
        return nums[index];
    }

    if(index < 0){
        return 0;
    }

    if(dp[index] != -1) return dp[index];

    //take
    int takeSum = nums[index] + solve(nums, index-2, dp);
    
    //no take
    int notakeSum = 0 + solve(nums, index-1, dp);

    return dp[index] = max(takeSum, notakeSum);
}

int maximumNonAdjacentSum(vector<int> &nums){
    // Write your code here.
    int n = nums.size();
    vector<int> dp(n, -1);

    return solve(nums, n-1, dp);
}



appraoch 2: Tabulation bottom up (from basecae to last element)
TC = O(N) and  SC = O(N)dp array

#include <bits/stdc++.h> 
int maximumNonAdjacentSum(vector<int> &nums){
    // Write your code here.
    int n = nums.size()-1;
    vector<int> dp(n);
    dp[0] = 0;

    for(int i=1; i<n; i++){
        int take = nums[i];
        if(i > 1) take += dp[i-2];
        int notake = 0 + dp[i-1];
        int dp[i] = max(take, notake);
    }

}



appraoch 3: space optimazition
Tc = O(N) and SC = O(1)

int maximumNonAdjacentSum(vector<int> &nums){
    // Write your code here.
    int prev = nums[0];
    int prev2 = 0;

    for(int i=1; i<nums.size(); i++){
        int take = nums[i];
        if(i > 1) take += prev2;
        int notake = 0 + prev;
        int curr = max(take, notake);

        prev2 = prev;
        prev = curr;
    }

    return prev;
}
