approach 1: memoization
TC = O(m+n) SC = O(m-1 + n-1)stack space + O(m*n)2d dp vector

    int solve(int row, int col, vector<vector<int>>& dp){
        if(row == 0 && col == 0){
            return 1;
        }
        if(row < 0 || col < 0){
            return 0;
        }

        if(dp[row][col] != -1) return dp[row][col];
        int up = solve(row, col-1, dp);
        int left = solve(row-1, col, dp);

        return dp[row][col] = up + left;
    }

    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m, vector<int>(n, -1));
        return solve(m-1, n-1, dp);
    }


approach 2: Tabulation Bottom up
TC = O(N*M) SC = O(M*N);

        vector<vector<int>> dp(m, vector<int>(n, 0));
        dp[0][0] = 1;

        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(i == 0 && j == 0) dp[i][j] = 1;
                else{
                    int up = 0, left = 0;
                    if(i>0) up = dp[i-1][j];
                    if(j>0) left = dp[i][j-1];
                    dp[i][j] = up + left;
                }
            }
        }
        return dp[m-1][n-1];
    }

approach 3: space optimazition
TC = O(m*n) and SC = O(n)

        vector<int>prev (n, 0);

        for(int i=0; i<m; i++){
            vector<int> cur(n, 0);
            for(int j=0; j<n; j++){
                if(i == 0 && j == 0) cur[i] = 1;
                else{
                    int up = 0, left = 0;
                    if(i>0) up = prev[j];
                    if(j>0) left = cur[j-1];
                    cur[j] = up + left;
                }   
            }
            prev = cur;
        }
        return prev[n-1];
    }
