approach 1: memoization
TC = O(N*M*M) SC = O(N)stack space + O(N*M*M)dp array

        int solve(int i, int j1, int j2, vector<vector<int>>& grid, vector<vector<vector<int>>>& dp ){
        if(j1 < 0 || j2 < 0 || j1 >= grid[0].size() || j2 >= grid[0].size()) return -1e8;
        if(i == grid.size()-1){
            if(j1 == j2) return grid[i][j1]; //if both robots are in same cell
            else return grid[i][j1] + grid[i][j2]; //if robots are in different cell
        }

        if(dp[i][j1][j2] != -1) return dp[i][j1][j2];

        int maxi = 0;
        for(int R1moves = -1; R1moves <= 1; R1moves++){
           for(int R2moves = -1; R2moves <= 1; R2moves++){
               if(j1 == j2){
                   maxi =  max(maxi, grid[i][j1] + solve(i+1, j1+R1moves, j2+R2moves, grid, dp)); //if both robots are in same cell we will add only one of them in total
               }
               else{
                   maxi = max(maxi, grid[i][j1] + grid[i][j2] + solve(i+1, j1+R1moves, j2+R2moves, grid, dp)); //if both robots are in different cell we will add both of them in total
               }
            }
        }

        return dp[i][j1][j2] = maxi;
    }

    int cherryPickup(vector<vector<int>>& grid) {

        int n = grid.size();
        int m = grid[0].size();

        vector<vector<vector<int>>> dp (n, vector<vector<int>> (m, vector<int>(m ,-1)));

        return solve(0, 0, m-1, grid, dp);
    }



approach 2: Tabulation
Time Complexity: O(N*M*M)*9 
Space Complexity: O(N*M*M) No stack space


    int cherryPickup(vector<vector<int>>& grid) {
        int n= grid.size();
        int m= grid[0].size();
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(m, vector<int>(m, 0)));  // 3d vector of size n * m * m

        for(int j1=0; j1<m; j1++){
            for(int j2=0; j2<m; j2++){

                if(j1 == j2)    dp[n-1][j1][j2]= grid[n-1][j1];         // if both robots are at same cell only add it once in dp
                else    dp[n-1][j1][j2]= grid[n-1][j1] + grid[n-1][j2];   // if they are at different then we add both of them to dp
            }
        } 

        // cases for n-1 has been covered so, we start from n-2
        for(int i=n-2; i>=0; i--){
            for(int j1=0; j1<m; j1++){
                for(int j2=0; j2<m; j2++){
                    int mx= -1e9;

                    for(int dr = -1; dr <= 1; dr++){      // -1 to +1 for row & col will cover all the 9 conditions of the directions 
                        for(int dc = -1; dc <= 1; dc++){
                            int val;

                            if(j1 == j2)    val= grid[i][j1];    // both robots are at same cell
                            else    val= grid[i][j1] + grid[i][j2];

                            if( j1+dr < 0 || j1+dr >=m || j2+dc < 0 || j2+dc >=m )  val+= -1e9;     // boundary cases
                            else    val+= dp[i+1][j1+dr][j2+dc];          // we store using next values calculated

                            mx= max(mx, val);       // calculate the max value for storing it in dp
                        }
                    }
                    dp[i][j1][j2]= mx;
                }
            }
        }
        return dp[0][0][m-1];        
    }