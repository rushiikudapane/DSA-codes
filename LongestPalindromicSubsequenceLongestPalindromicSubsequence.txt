class Solution {
public:
    int f(int n, int m, string& s1, string& s2, vector<vector<int>>& dp){
        if(n < 0 || m < 0) return 0;

        if(dp[n][m] != -1) return dp[n][m];

        if(s1[n] == s2[m]) return dp[n][m] = 1 + f(n-1, m-1, s1, s2, dp);
        return dp[n][m] = max(f(n-1, m, s1, s2, dp), f(n, m-1, s1, s2, dp));
    }

    int longestPalindromeSubseq(string s) {
        string s1 = s;
        reverse(s.begin(), s.end());
        string s2 = s;

        int n = s1.size();
        int m = s2.size();

        vector<vector<int>> dp(n, vector<int>(m, -1));

        return f(n-1, m-1, s1, s2, dp);
    }
};