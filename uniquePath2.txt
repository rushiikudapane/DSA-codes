approach 1: memoization
TC = O(m+n) SC = O(m-1 + n-1)stack space + O(m*n)2d dp vector

    int solve(int row, int col, vector<vector<int>>& grid, vector<vector<int>>&dp){
        if(row >= 0 && col >= 0 && grid[row][col] == 1) return 0;
        if(row == 0 && col == 0) return 1;
        if(row < 0 || col < 0) return 0;

        if(dp[row][col] != -1) return dp[row][col];
        int up = solve(row-1, col, grid, dp);
        int left = solve(row, col-1, grid, dp);

        return up + left;
    }

    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();

        vector<vector<int>> dp (m, vector<int>(n, -1));
        return solve(m-1, n-1, obstacleGrid, dp);
    }


approach 2: Tabulation Bottom up
TC = O(N*M) SC = O(M*N);

int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();

        vector<vector<int>> dp (m, vector<int>(n, 0));

        dp[0][0] = 1;

        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if( obstacleGrid[i][j] == 1) dp[i][j] = 0;
                else if (i == 0 && j == 0 ) dp[i][j] = 1;
                else{
                        int up = 0, left = 0;
                        if(i > 0) up = dp[i-1][j];
                        if(j > 0) left = dp[i][j-1];
                       dp[i][j] = up + left;
                }
            }
        }
        return dp[m-1][n-1];
    }