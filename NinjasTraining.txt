appraoch 1: memoization;
TC = O(4N) SC = O(N)stack space + O(N) dp vector

int solve(int day, vector<vector<int>>& points, int last, vector<vector<int>>& dp){
    if(day == 0){
        int maxi = 0;
        for(int i=0; i<=2; i++){
          if (i != last) {
            maxi = max(points[0][i], maxi);
          }
        }
        return maxi;
    }

    if(dp[day][last] != -1) return dp[day][last]; 

    int maxi = 0;
    for(int i=0; i<=2; i++){
        if(i != last){
            int pointsEarned = points[day][i] + solve(day-1, points, i, dp); 
            maxi = max(pointsEarned, maxi);
        }
    }
    return dp[day][last] = maxi;
}


int ninjaTraining(int n, vector<vector<int>> &points)
{
    // Write your code here.
    vector<vector<int>> dp(n, vector<int>(4, -1));  
    int last = 3;
    return solve(n-1, points, last, dp);
}


approach 2: Tabulation
Time Complexity: O(N*4*3) Space Complexity: O(N*4)

int ninjaTraining(int n, vector<vector<int>> &points)
{
    // Write your code here.
  vector < vector < int > > dp(n, vector < int > (4, 0));

  dp[0][0] = max(points[0][1], points[0][2]);
  dp[0][1] = max(points[0][0], points[0][2]);
  dp[0][2] = max(points[0][0], points[0][1]);
  dp[0][3] = max(points[0][0], max(points[0][1], points[0][2]));

  for (int day = 1; day < n; day++) {
    for (int last = 0; last < 4; last++) {
      dp[day][last] = 0;
      for (int task = 0; task <= 2; task++) {
        if (task != last) {
          int activity = points[day][task] + dp[day - 1][task];
          dp[day][last] = max(dp[day][last], activity);
        }
      }
    }

  }

  return dp[n - 1][3];

}