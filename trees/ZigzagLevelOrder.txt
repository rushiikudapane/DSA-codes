approach: TC = O(N) SC = O(N):

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        if(root == NULL) return ans;
        queue<TreeNode*> q;
        q.push(root);
        bool flag = true;

        while(!q.empty()){
            int size = q.size();
            vector<int> temp;
            for(int i=1; i<=size; i++){
                TreeNode* tempNode = q.front();
                if(tempNode != NULL) temp.push_back(tempNode -> val);
                q.pop();
                if(tempNode -> left != NULL){
                    q.push(tempNode->left);
                }
                if(tempNode -> right != NULL){
                    q.push(tempNode->right);
                }
            }
            if(!flag){
                reverse(temp.begin(), temp.end());
            }

            flag = !flag;
            ans.push_back(temp);
        }

        return ans;
    }
};