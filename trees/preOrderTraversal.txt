/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

TC = O(N) SC = O(N)
#Recursive Solution

class Solution {
public:
    void solve( TreeNode *root, vector<int>& ans){
        if(root == NULL) return;

        ans.push_back(root->val);
        solve(root->left, ans);
        solve(root->right, ans);
    }

    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> ans;
        solve(root, ans);
        return ans;
    }
};

#Iterative Solution

class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> ans;
        if(root == NULL) return ans;
        stack<TreeNode*> st;

        st.push(root);
        while(!st.empty()){
            TreeNode* tempNode = st.top();
            st.pop();
            ans.push_back(tempNode->val);
            
            if(tempNode -> right != NULL) st.push(tempNode -> right);
            if(tempNode -> left != NULL) st.push(tempNode -> left);
        }

        return ans;  
    }
};