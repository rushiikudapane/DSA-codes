approcah 1: Tc O(N + NLogN) Sc = O(N)
dfs inorder traversal

    void findIndexes(Node *root, vector<pair<int, int>>& indexes, map<pair<int, int>,int>& mp, int i, int j){
        if(root == NULL) return;
        
        findIndexes(root -> left, indexes, mp, i-1, j+1);
        indexes.push_back(make_pair(i, j));
        mp[make_pair(i, j)] = root -> data;
        findIndexes(root -> right, indexes, mp, i+1, j+1);
        
        return;
        
    }
  
    vector <int> bottomView(Node *root) {
        // Your Code Here
        vector<int> ans;
        vector<pair<int, int>> indexes;
        map<pair<int,int>, int> mp;
        findIndexes(root, indexes, mp, 0, 0);
        
        sort(indexes.rbegin(), indexes.rend());
        
        int temp = INT_MIN;
        for(int i=0; i<indexes.size(); i++){
            if(indexes[i].first != temp){
                temp = indexes[i].first;
                ans.push_back(mp[indexes[i]]);
            }
        }
        
        reverse(ans.begin(), ans.end());
        return ans;
        
    }


approach 2 TC = O(N) SC = O(N)
level order traversal

    void findIndexes(Node *root, vector<pair<int, int>>& indexes, map<pair<int, int>,int>& mp, int i, int j){
        if(root == NULL) return;
        
        findIndexes(root -> left, indexes, mp, i-1, j+1);
        indexes.push_back(make_pair(i, j));
        mp[make_pair(i, j)] = root -> data;
        findIndexes(root -> right, indexes, mp, i+1, j+1);
        
        return;
        
    }
  
    vector <int> bottomView(Node *root) {
        // Your Code Here
        vector<int> ans;
        vector<pair<int, int>> indexes;
        map<pair<int,int>, int> mp;
        findIndexes(root, indexes, mp, 0, 0);
        
        sort(indexes.rbegin(), indexes.rend());
        
        int temp = INT_MIN;
        for(int i=0; i<indexes.size(); i++){
            if(indexes[i].first != temp){
                temp = indexes[i].first;
                ans.push_back(mp[indexes[i]]);
            }
        }
        
        reverse(ans.begin(), ans.end());
        return ans;
        
    }